{"title":"Vue 向导","date":"2019-05-03T11:17:05.000Z","updated":"2019-05-03T11:17:05.000Z","content":"<h1 id=\"章节引导\">章节引导<a href=\"vue/Vue向导#章节引导\"></a></h1><hr>\n<h1 id=\"1-Vue-js是什么\">1. Vue.js是什么?<a href=\"vue/Vue向导#1-Vue-js是什么\"></a></h1><pre><code>1). 一位华裔前Google工程师(尤雨溪)开发的前端js库\n2). 作用: 动态构建用户界面\n3). 特点:\n    * 遵循MVVM模式\n    * 编码简洁, 体积小, 运行效率高, 移动/PC端开发\n    * 它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目\n4). 与其它框架的关联:\n    * 借鉴angular的模板和数据绑定技术\n    * 借鉴react的组件化和虚拟DOM技术\n5). vue包含一系列的扩展插件(库):\n    * vue-cli: vue脚手架\n    * vue-resource(axios): ajax请求\n    * vue-router: 路由\n    * vuex: 状态管理\n    * vue-lazyload: 图片懒加载\n    * vue-scroller: 页面滑动相关\n    * mint-ui: 基于vue的组件库(移动端)\n    * element-ui: 基于vue的组件库(PC端)\n</code></pre><h1 id=\"2-基本使用\">2. 基本使用<a href=\"vue/Vue向导#2-基本使用\"></a></h1><pre><code>1). 引入vue.js\n2). 创建Vue实例对象(vm), 指定选项(配置)对象\n    el : 指定dom标签容器的选择器\n    data : 指定初始化状态数据的对象/函数(返回一个对象)\n3). 在页面模板中使用{{}}或vue指令\n</code></pre><h1 id=\"3-Vue对象的选项\">3. Vue对象的选项<a href=\"vue/Vue向导#3-Vue对象的选项\"></a></h1><h2 id=\"1-el\">1). el<a href=\"vue/Vue向导#1-el\"></a></h2><pre><code>指定dom标签容器的选择器\nVue就会管理对应的标签及其子标签\n</code></pre><h2 id=\"2-data\">2). data<a href=\"vue/Vue向导#2-data\"></a></h2><pre><code>对象或函数类型\n指定初始化状态属性数据的对象\nvm也会自动拥有data中所有属性\n页面中可以直接访问使用\n数据代理: 由vm对象来代理对data中所有属性的操作(读/写)\n</code></pre><h2 id=\"3-methods\">3). methods<a href=\"vue/Vue向导#3-methods\"></a></h2><pre><code>包含多个方法的对象\n供页面中的事件指令来绑定回调\n回调函数默认有event参数, 但也可以指定自己的参数\n所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx\n</code></pre><h2 id=\"4-computed\">4). computed<a href=\"vue/Vue向导#4-computed\"></a></h2><pre><code>包含多个方法的对象\n对状态属性进行计算返回一个新的数据, 供页面获取显示\n一般情况下是相当于是一个只读的属性\n利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化\n如何给对象定义get/set属性\n    在创建对象时指定: get name () {return xxx} / set name (value) {}\n      对象创建之后指定: Object.defineProperty(obj, age, {get(){}, set(value){}})\n</code></pre><h2 id=\"5-watch\">5). watch<a href=\"vue/Vue向导#5-watch\"></a></h2><pre><code>包含多个属性监视的对象\n分为一般监视和深度监视\n    xxx: function(value){}\n    xxx : {\n        deep : true,\n        handler : fun(value)\n    }\n另一种添加监视方式: vm.$watch(&apos;xxx&apos;, function(value){})\n</code></pre><h1 id=\"4-过渡动画\">4. 过渡动画<a href=\"vue/Vue向导#4-过渡动画\"></a></h1><pre><code>利用vue去操控css的transition/animation动画\n模板: 使用&lt;transition name=&apos;xxx&apos;&gt;包含带动画的标签\ncss样式\n    .fade-enter-active: 进入过程, 指定进入的transition\n    .fade-leave-active: 离开过程, 指定离开的transition\n    .xxx-enter, .xxx-leave-to: 指定隐藏的样式\n编码例子\n    .xxx-enter-active, .xxx-leave-active {\n      transition: opacity .5s\n    }\n    .xxx-enter, .xxx-leave-to {\n      opacity: 0\n    }\n\n    &lt;transition name=&quot;xxx&quot;&gt;\n      &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;\n    &lt;/transition&gt;\n</code></pre><h1 id=\"5-生命周期\">5. 生命周期<a href=\"vue/Vue向导#5-生命周期\"></a></h1><pre><code>vm/组件对象\n生命周期图\n主要的生命周期函数(钩子)\n    created() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)\n    beforeDestroy(): 做一些收尾的工作\n</code></pre><h1 id=\"6-自定义过滤器\">6. 自定义过滤器<a href=\"vue/Vue向导#6-自定义过滤器\"></a></h1><h2 id=\"1-理解\">1). 理解<a href=\"vue/Vue向导#1-理解\"></a></h2><pre><code>对需要显示的数据进行格式化后再显示\n</code></pre><h2 id=\"2-编码\">2). 编码<a href=\"vue/Vue向导#2-编码\"></a></h2><pre><code>1). 定义过滤器\n    Vue.filter(filterName, function(value[,arg1,arg2,...]){\n      // 进行一定的数据处理\n      return newValue\n    })\n2). 使用过滤器\n    &lt;div&gt;{{myData | filterName}}&lt;/div&gt;\n    &lt;div&gt;{{myData | filterName(arg)}}&lt;/div&gt;\n</code></pre><h1 id=\"7-vue内置指令\">7. vue内置指令<a href=\"vue/Vue向导#7-vue内置指令\"></a></h1><pre><code>v-text/v-html: 指定标签体\n    * v-text : 当作纯文本\n    * v-html : 将value作为html标签来解析\nv-if v-else v-show: 显示/隐藏元素\n    * v-if : 如果vlaue为true, 当前标签会输出在页面中\n    * v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中\n    * v-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none\nv-for : 遍历\n    * 遍历数组 : v-for=&quot;(person, index) in persons&quot;   \n    * 遍历对象 : v-for=&quot;value in person&quot;   $key\nv-on : 绑定事件监听\n    * v-on:事件名, 可以缩写为: @事件名\n    * 监视具体的按键: @keyup.keyCode   @keyup.enter\n    * 停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent\n    * 隐含对象: $event\nv-bind : 强制绑定解析表达式  \n    * html标签属性是不支持表达式的, 就可以使用v-bind\n    * 可以缩写为:  :id=&apos;name&apos;\n    * :class\n      * :class=&quot;a&quot;\n        * :class=&quot;{classA : isA, classB : isB}&quot;\n        * :class=&quot;[classA, classB]&quot;\n    * :style\n        :style=&quot;{color : color}&quot;\nv-model\n    * 双向数据绑定\n    * 自动收集用户输入数据\nref : 标识某个标签\n    * ref=&apos;xxx&apos;\n    * 读取得到标签对象: this.$refs.xxx\n</code></pre><h1 id=\"8-自定义指令\">8. 自定义指令<a href=\"vue/Vue向导#8-自定义指令\"></a></h1><h2 id=\"1-注册全局指令\">1). 注册全局指令<a href=\"vue/Vue向导#1-注册全局指令\"></a></h2><pre><code>Vue.directive(&apos;my-directive&apos;, function(el, binding){\n  el.innerHTML = binding.value.toUpperCase()\n})\n</code></pre><h2 id=\"2-注册局部指令\">2). 注册局部指令<a href=\"vue/Vue向导#2-注册局部指令\"></a></h2><pre><code>directives : {\n  &apos;my-directive&apos; : function(el, binding) {\n      el.innerHTML = binding.value.toUpperCase()\n  }\n}\n</code></pre><h2 id=\"3-使用指令\">3). 使用指令<a href=\"vue/Vue向导#3-使用指令\"></a></h2><pre><code>&lt;div v-my-directive=&apos;xxx&apos;&gt;\n</code></pre>","link":"vue/Vue向导","plink":"http://yoursite.com/vue/Vue向导/","toc":[{"title":"章节引导","id":"章节引导","index":"1"},{"title":"1. Vue.js是什么?","id":"1-Vue-js是什么","index":"2"},{"title":"2. 基本使用","id":"2-基本使用","index":"3"},{"title":"3. Vue对象的选项","id":"3-Vue对象的选项","index":"4","children":[{"title":"1). el","id":"1-el","index":"4.1"},{"title":"2). data","id":"2-data","index":"4.2"},{"title":"3). methods","id":"3-methods","index":"4.3"},{"title":"4). computed","id":"4-computed","index":"4.4"},{"title":"5). watch","id":"5-watch","index":"4.5"}]},{"title":"4. 过渡动画","id":"4-过渡动画","index":"5"},{"title":"5. 生命周期","id":"5-生命周期","index":"6"},{"title":"6. 自定义过滤器","id":"6-自定义过滤器","index":"7","children":[{"title":"1). 理解","id":"1-理解","index":"7.1"},{"title":"2). 编码","id":"2-编码","index":"7.2"}]},{"title":"7. vue内置指令","id":"7-vue内置指令","index":"8"},{"title":"8. 自定义指令","id":"8-自定义指令","index":"9","children":[{"title":"1). 注册全局指令","id":"1-注册全局指令","index":"9.1"},{"title":"2). 注册局部指令","id":"2-注册局部指令","index":"9.2"},{"title":"3). 使用指令","id":"3-使用指令","index":"9.3"}]}]}