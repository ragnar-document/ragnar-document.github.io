{"title":"逐步实现Node.js+express增删改查（ 二 ）","date":"2019-05-07T06:47:46.000Z","link":"post/逐步实现Node.js+express增删改查二 ","tags":["js","node.js","后端"],"updated":"2019-05-07T11:45:27.000Z","content":"<h1 id=\"逐步实现Node-js-express增删改查（-二-）\">逐步实现Node.js+express增删改查（ 二 ）<a href=\"post/逐步实现Node.js+express增删改查二 #逐步实现Node-js-express增删改查（-二-）\"></a></h1><h3 id=\"知识储备\">知识储备<a href=\"post/逐步实现Node.js+express增删改查二 #知识储备\"></a></h3><h4 id=\"insert\">insert<a href=\"post/逐步实现Node.js+express增删改查二 #insert\"></a></h4><p>创建插入查询，将要插入行的属性的哈希或插入的数组作为单个插入命令执行。使用包含插入模型的第一个插入标识的数组或者包含所有插入的postgresql标识的数组或Amazon Redshift的行数解析承诺/实现回调。insert 创建插入查询，将要插入行的属性的哈希或插入数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns [1] in \"mysql\", \"sqlite\", \"oracle\"; [] in \"postgresql\" unless the 'returning' parameter is set.</span></span><br><span class=\"line\">knex(<span class=\"string\">'books'</span>).insert(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'Slaughterhouse Five'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">insert into <span class=\"string\">`books`</span> (<span class=\"string\">`title`</span>) values (<span class=\"string\">'Slaughterhouse Five'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Where-语句\">Where 语句<a href=\"post/逐步实现Node.js+express增删改查二 #Where-语句\"></a></h4><p>有几种方法可以帮助动态地从句。在很多地方，函数可以用来代替值，构造子查询。在大多数地方，现有的knex查询可能用于组成子查询等。</p>\n<p>这里我们用到的是对象语法</p>\n<p>例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knex(<span class=\"string\">'users'</span>).where(&#123;</span><br><span class=\"line\">  first_name: <span class=\"string\">'Test'</span>,</span><br><span class=\"line\">  last_name:  <span class=\"string\">'User'</span></span><br><span class=\"line\">&#125;).select(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">select <span class=\"string\">`id`</span> <span class=\"keyword\">from</span> <span class=\"string\">`users`</span> where <span class=\"string\">`first_name`</span> = <span class=\"string\">'Test'</span> and <span class=\"string\">`last_name`</span> = <span class=\"string\">'User'</span></span><br></pre></td></tr></table></figure>\n<p>对于<strong>async</strong>和<strong>await</strong><a href=\"https://www.kancloud.cn/xiaojilinggui/qianduan/1015353\" target=\"_blank\" rel=\"noopener\">关键字的理解</a></p>\n<h4 id=\"第一步添加增删改查方法models-user-js\">第一步添加增删改查方法models/user.js<a href=\"post/逐步实现Node.js+express增删改查二 #第一步添加增删改查方法models-user-js\"></a></h4><p>添加insert、updata、delete方法</p>\n<p>使用knex知识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//举例</span></span><br><span class=\"line\"><span class=\"comment\">//.catch()是一种简单的处理错误的方法大致都一样所以不需要太大修改根据实际情况走</span></span><br><span class=\"line\"><span class=\"comment\">//then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</span></span><br><span class=\"line\">insert: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      knex(TABLE).insert(params)</span><br><span class=\"line\">      .then( <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reslove(res)</span><br><span class=\"line\">      &#125;).catch( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步在controllers-user-js-添加增删改查的参数和逻辑\">第二步在controllers/user.js 添加增删改查的参数和逻辑<a href=\"post/逐步实现Node.js+express增删改查二 #第二步在controllers-user-js-添加增删改查的参数和逻辑\"></a></h4><p><strong>请求 </strong> <a href=\"http://expressjs.com/en/api.html#req.body\" target=\"_blank\" rel=\"noopener\">Req.body</a> 包含请求正文中提交的键值对数据</p>\n<p><strong>响应</strong>  <a href=\"http://expressjs.com/en/api.html#res.json\" target=\"_blank\" rel=\"noopener\">Res.json</a> 发送JSON响应。此方法使用<strong>JSON.stringify</strong>发送响应（具有正确的内容类型），该响应是转换为JSON字符串的参数。</p>\n<p>该参数可以是任何JSON类型，包括对象，数组，字符串，布尔值，数字或null，您还可以使用它将其他值转换为JSON。</p>\n<p>例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.json(&#123; <span class=\"attr\">code</span>: <span class=\"number\">200</span>, <span class=\"attr\">data</span>: users&#125;)</span><br></pre></td></tr></table></figure>\n<p>例2:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.json(<span class=\"literal\">null</span>);</span><br><span class=\"line\">res.json(&#123; <span class=\"attr\">user</span>: <span class=\"string\">'tobi'</span> &#125;);</span><br><span class=\"line\">res.status(<span class=\"number\">500</span>).json(&#123; <span class=\"attr\">error</span>: <span class=\"string\">'message'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"res-render（view-，locals-，callback-）\">res.render（view [，locals] [，callback]）<a href=\"post/逐步实现Node.js+express增删改查二 #res-render（view-，locals-，callback-）\"></a></h5><p>Locals 是一个对象，其属性定义视图局部变量</p>\n<p>callback 一个回调函数如果提供，则该方法返回可能的错误和呈现的字符串，但不执行自动响应。发生错误时，该方法在<code>next(err)</code>内部调用。</p>\n<p>例子中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">'user/show.tpl'</span>,res.locals)</span><br></pre></td></tr></table></figure>\n<p>Res.locals 包含作用于请求的响应局部变量对象，因此仅对在请求响应周期呈现的视图可用</p>\n<p>此属性对于公开请求级别信息（例如请求路径名，经过身份验证的用户，用户设置等）非常有用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(function(req, res, next)&#123;</span><br><span class=\"line\">  res.locals.user = req.user;</span><br><span class=\"line\">  res.locals.authenticated = ! req.user.anonymous;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三步请求数据\">第三步请求数据<a href=\"post/逐步实现Node.js+express增删改查二 #第三步请求数据\"></a></h4><p>把基本设施建设完毕以后我们需要把我们的东西运送出去这个任务我们需要交给我们的路由去处理</p>\n<p><strong>路由方法</strong></p>\n<p>Express 支持对应于 HTTP 方法的以下路由方法：<code>get</code>、<code>post</code>、<code>put</code>、<code>head</code>、<code>delete</code>、<code>options</code>、<code>trace</code>、<code>copy</code>、<code>lock</code>、<code>mkcol</code>、<code>move</code>、<code>purge</code>、<code>propfind</code>、<code>proppatch</code>、<code>unlock</code>、<code>report</code>、<code>mkactivity</code>、<code>checkout</code>、<code>merge</code>、<code>m-search</code>、<code>notify</code>、<code>subscribe</code>、<code>unsubscribe</code>、<code>patch</code>、<code>search</code> 和 <code>connect</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同一个接口地址，但是不同的请求方法</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/user'</span> , userController.insert);</span><br><span class=\"line\">router.put(<span class=\"string\">'/user'</span> , userController.update);</span><br><span class=\"line\">router.delete(<span class=\"string\">'/user'</span> , userController.delete);</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步展现出来\">第四步展现出来<a href=\"post/逐步实现Node.js+express增删改查二 #第四步展现出来\"></a></h4><p>给show.tpl添加jquery点击事件等</p>\n<h5 id=\"ajax\">$.ajax()<a href=\"post/逐步实现Node.js+express增删改查二 #ajax\"></a></h5><p>该方法用于执行Ajax请求常用与其他jquery ajax请不能完成的请求 </p>\n<h5 id=\"可选字段\">可选字段<a href=\"post/逐步实现Node.js+express增删改查二 #可选字段\"></a></h5><p>Url:     链接地址，字符串表示</p>\n<p>Data:    需要发送到服务器的数据 GET与POST都可以    </p>\n<p>Type:    请求类型</p>\n<p>Timeout:    请求超时时间</p>\n<p>Cache:    是否缓存请求结果bool表示</p>\n<p>contentType:    内容类型</p>\n<p>dataType:    服务器响应数据类型字符串表示当填写为json时，回调函数中无需再对数据反序列化为json</p>\n<p>Success:    请求成功后服务器回调的函数</p>\n<p>Error:    请求失败后服务器回调的函数</p>\n<p>Complete:    请求完成后调用的函数无论请求成功还是失败都会调用该函数如果设置了success与error函数，则该函数在它们之后被调用</p>\n<p>Async:    是否异步处理 bool表示 默认true<strong>设置该值为false后，JS不会向下执行，而是原地等待服务器返回数据，并完成相应的回调函数后，再向下执行</strong></p>\n<p>Username: 访问认证请求中携带的用户名，字符串表示</p>\n<p>Password: 返回认证请求中携带的密码，字符串表示</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> id = $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">     </span><br><span class=\"line\">     $.ajax(&#123;</span><br><span class=\"line\">         url: <span class=\"string\">'/api/user'</span>,</span><br><span class=\"line\">         data: &#123; id &#125;,</span><br><span class=\"line\">         type: <span class=\"string\">'DELETE'</span>,</span><br><span class=\"line\">         success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(data.code === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">             alert(<span class=\"string\">'删除成功！'</span>)</span><br><span class=\"line\">             location.reload()</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p><a href>例子下载</a></p>\n","prev":{"title":"卡梅龙Chameleon体验","link":"post/卡梅龙Chameleon体验"},"next":{"title":"逐步实现Node.js+express增删改查（ 一 ）","link":"post/逐步实现Node.js+express增删改查一"},"plink":"http://yoursite.com/post/逐步实现Node.js+express增删改查二 /","toc":[{"title":"逐步实现Node.js+express增删改查（ 二 ）","id":"逐步实现Node-js-express增删改查（-二-）","index":"1"}]}