{"title":"逐步实现Node.js+express增删改查（ 一 ）","date":"2019-05-06T12:27:57.000Z","link":"post/逐步实现Node.js+express增删改查一","tags":["js","node.js","后端"],"updated":"2019-05-06T12:29:44.000Z","content":"<h1 id=\"逐步实现Node-js-express增删改查（-一-）\">逐步实现Node.js+express增删改查（ 一 ）<a href=\"post/逐步实现Node.js+express增删改查一#逐步实现Node-js-express增删改查（-一-）\"></a></h1><h3 id=\"准备工作\">准备工作<a href=\"post/逐步实现Node.js+express增删改查一#准备工作\"></a></h3><p>全局安装 express-generator 项目构建工具：<code>npm install -g express-generator</code></p>\n<p>初始化文件    <code>cd ~/Desktop &amp;&amp; express expressApp &amp;&amp; cd expressApp</code></p>\n<p>安装依赖    <code>npm install</code></p>\n<p>替换原有语法模版因为这个更好用更贴近我们<code>npm install --save nunjucks</code></p>\n<p>View替换文件下载⏬：<a href=\"https://github.com/ragnar-document/Document-dish/tree/master/node\" target=\"_blank\" rel=\"noopener\">点击下载</a></p>\n<p>把安装好的nunjucks 引入我们的app.js中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nunjucks =<span class=\"built_in\">require</span>(<span class=\"string\">'nunjucks'</span>);</span><br><span class=\"line\">....</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>,<span class=\"string\">'tpl'</span>);</span><br><span class=\"line\">nunjucks.configure(<span class=\"string\">'views'</span>,&#123;</span><br><span class=\"line\">  autoescape: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  express: app,</span><br><span class=\"line\">  watch:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>跑起来测试一下看看有没有问题<code>npm start</code>  地址<a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a></p>\n<p>安装项目依赖 <code>npm install -save knex mysql</code></p>\n<p>knex类似于查询器文档&gt;&gt;&gt;<a href=\"https://www.songxingguo.com/2018/06/30/knex.js-query/\" target=\"_blank\" rel=\"noopener\">https://www.songxingguo.com/2018/06/30/knex.js-query/</a></p>\n<div class=\"article-img\"><p><img src=\"https://github.com/ragnar-document/Document-dish/blob/master/images/WX20190506-193449.png?raw=true\" alt data-zoomable></p></div>\n<h3 id=\"配置数据库里面的内容\">配置数据库里面的内容<a href=\"post/逐步实现Node.js+express增删改查一#配置数据库里面的内容\"></a></h3><ul>\n<li>Field:id</li>\n<li>Field:name Type:VARCHAR LENGTH:255 Comment:姓名</li>\n<li>Field:email  Type:VARCHAR LENGTH:255 Comment:邮箱</li>\n<li>Field:password Type:VARCHAR LENGTH:255 Comment:密码</li>\n<li><p>手动设置几个默认值，例如：</p>\n</li>\n<li><p>name:Jay email:<a href=\"mailto:jay@qq.com\" target=\"_blank\" rel=\"noopener\">jay@qq.com</a> password:123456</p>\n</li>\n<li>name:Jeo email:<a href=\"mailto:jay@qq.com\" target=\"_blank\" rel=\"noopener\">jay@qq.com</a> password:123456</li>\n<li>name:Jax email:<a href=\"mailto:jay@qq.com\" target=\"_blank\" rel=\"noopener\">jay@qq.com</a> password:123456</li>\n</ul>\n<h5 id=\"配置一下config-js文件链接数据库\">配置一下config.js文件链接数据库<a href=\"post/逐步实现Node.js+express增删改查一#配置一下config-js文件链接数据库\"></a></h5><p>根目录下新建<code>config.js</code>文件    📃</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> configs = &#123;</span><br><span class=\"line\">  mysql: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"string\">'3306'</span>,</span><br><span class=\"line\">    user: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">''</span>,</span><br><span class=\"line\">    database: <span class=\"string\">'expressapp'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config</span><br></pre></td></tr></table></figure>\n<p>为了避免上传私密文件或者一些重要的我们需要创建</p>\n<p><strong>gitignore</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">.idea</span><br><span class=\"line\">npm-debug.log</span><br><span class=\"line\">yarn-error.log</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">config.js</span><br></pre></td></tr></table></figure>\n<p>新建model层在其下添加knex.js 数据库的配置并初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> configs = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 把配置文件中的信息，设置在初始化配置中</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'knex'</span>)(&#123;</span><br><span class=\"line\">  client: <span class=\"string\">'mysql'</span>,</span><br><span class=\"line\">  connection: &#123;</span><br><span class=\"line\">    host: configs.mysql.host,</span><br><span class=\"line\">    port: configs.mysql.port,</span><br><span class=\"line\">    user: configs.mysql.user,</span><br><span class=\"line\">    password: configs.mysql.password,</span><br><span class=\"line\">    database: configs.mysql.database</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>接下来就是要把数据库里设计好的数据通过    <strong>models/user.js</strong> 中设置获取所有用户的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//因为数据是从数据库中取出所以需要通过knex的连接来获取数据库的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> knew = <span class=\"built_in\">require</span>(<span class=\"string\">'./../models/knex'</span>);</span><br><span class=\"line\"><span class=\"comment\">//定义数据库表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> TABLE = <span class=\"string\">'users'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> User = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取所有用户的方法</span></span><br><span class=\"line\">  all: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// knex select 操作相关方法</span></span><br><span class=\"line\">      knex.select().table(TABLE).then( <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reslove(res)</span><br><span class=\"line\">      &#125;).catch( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询构建器通过指定要查询的表名或通过直接在knex对象上调用任何方法来启动。这将启动类似jQuery的链，您可以根据需要调用其他查询构建器方法来构造查询，最终调用任何接口方法，将其转换为toString或返回一个promise对象，回调或链式执行查询。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个select查询，为查询提供可选的列数组，如果在构建查询时没有指定，则最终默认为*。select调用的响应将使用从数据库中选择的对象数组来解析。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例：knex.select().table('books')</span></span><br></pre></td></tr></table></figure>\n<p>紧接着我们创建<strong>controllers/user.js</strong> 用户控制器设置展示方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用用户模版数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'./../models/user.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userController = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// show 获取用户数据并返回到页面</span></span><br><span class=\"line\">  show: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 从模型中获取所有用户数据</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> User.all();</span><br><span class=\"line\">      <span class=\"comment\">// 把用户数据设置到 res.locals 中</span></span><br><span class=\"line\">      res.locals.users = users;</span><br><span class=\"line\">      <span class=\"comment\">// 渲染到 views 视图目录的 user/show.tpl 路径中。</span></span><br><span class=\"line\">      res.render(<span class=\"string\">'user/show.tpl'</span>,res.locals)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      res.locals.error = e;</span><br><span class=\"line\">      res.render(<span class=\"string\">'error'</span>,res.locals)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = userController;</span><br></pre></td></tr></table></figure>\n<p>创建好控制器后我们需要去路由中引入使用</p>\n<p>Express 支持对应于 HTTP 方法的以下路由方法法：<code>get</code>、<code>post</code>、<code>put</code>、<code>head</code>、<code>delete</code>、<code>options</code>、<code>trace</code>、<code>copy</code>、<code>lock</code>、<code>mkcol</code>、<code>move</code>、<code>purge</code>、<code>propfind</code>、<code>proppatch</code>、<code>unlock</code>、<code>report</code>、<code>mkactivity</code>、<code>checkout</code>、<code>merge</code>、<code>m-search</code>、<code>notify</code>、<code>subscribe</code>、<code>unsubscribe</code>、<code>patch</code>、<code>search</code> 和 <code>connect</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userController = <span class=\"built_in\">require</span>(<span class=\"string\">'./../controllers/users.js'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">router.get(<span class=\"string\">'/user'</span>,userController.show)</span><br></pre></td></tr></table></figure>\n<h3 id=\"响应方法\">响应方法<a href=\"post/逐步实现Node.js+express增删改查一#响应方法\"></a></h3><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.download\" target=\"_blank\" rel=\"noopener\">res.download()</a></td>\n<td>提示将要下载文件。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.end\" target=\"_blank\" rel=\"noopener\">res.end()</a></td>\n<td>结束响应进程。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.json\" target=\"_blank\" rel=\"noopener\">res.json()</a></td>\n<td>发送 JSON 响应。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.jsonp\" target=\"_blank\" rel=\"noopener\">res.jsonp()</a></td>\n<td>在 JSONP 的支持下发送 JSON 响应。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.redirect\" target=\"_blank\" rel=\"noopener\">res.redirect()</a></td>\n<td>重定向请求。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.render\" target=\"_blank\" rel=\"noopener\">res.render()</a></td>\n<td>呈现视图模板。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.send\" target=\"_blank\" rel=\"noopener\">res.send()</a></td>\n<td>发送各种类型的响应。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.sendFile\" target=\"_blank\" rel=\"noopener\">res.sendFile</a></td>\n<td>以八位元流形式发送文件。</td>\n</tr>\n<tr>\n<td><a href=\"https://expressjs.com/zh-cn/4x/api.html#res.sendStatus\" target=\"_blank\" rel=\"noopener\">res.sendStatus()</a></td>\n<td>设置响应状态码并以响应主体形式发送其字符串表示。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>第一部分到这结束下一部分进入增删改查的主要过程～～～</p>\n<p>我的GitHub地址：<a href=\"https://github.com/ragnar-document\" target=\"_blank\" rel=\"noopener\">https://github.com/ragnar-document</a></p>\n","prev":{"title":"逐步实现Node.js+express增删改查（ 二 ）","link":"post/逐步实现Node.js+express增删改查二 "},"next":{"title":"Es6学习笔记：Set数据结构","link":"post/Es6之Set数据结构"},"plink":"http://yoursite.com/post/逐步实现Node.js+express增删改查一/","toc":[{"title":"逐步实现Node.js+express增删改查（ 一 ）","id":"逐步实现Node-js-express增删改查（-一-）","index":"1"}]}