{"title":"Es6学习笔记：Set数据结构","date":"2019-05-05T12:18:01.000Z","link":"post/Es6之Set数据结构","tags":["css","es6","js","前端"],"updated":"2019-05-05T12:31:26.000Z","content":"<h2 id=\"Set\">Set<a href=\"post/Es6之Set数据结构#Set\"></a></h2><p>基本属性它和数组类似，但是数组中的成员值是唯一的没有重复值，<code>Set</code>本身是一个构造函数用来生产一个数据结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> content = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(content) <span class=\"comment\">//1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"set实例和方法\">set实例和方法<a href=\"post/Es6之Set数据结构#set实例和方法\"></a></h3><p>Set结构的实例有以下属性</p>\n<p>构造函数，默认就是set函数：<code>Set.prototype.constructor</code></p>\n<p>返回总数，<code>Set.prototype.size</code>可以简写为<code>Set.size</code></p>\n<h3 id=\"操作方法和遍历方法\">操作方法和遍历方法<a href=\"post/Es6之Set数据结构#操作方法和遍历方法\"></a></h3><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>add(value)</th>\n<th>delete(value)</th>\n<th>has(value)</th>\n<th>clear()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>添加数值返回set本身</td>\n<td>删除某个值返回布尔值表示是否成功删除</td>\n<td>返回布尔值查看该值是否存在与set</td>\n<td>清除所有set成员不返回值</td>\n</tr>\n<tr>\n<td>keys( )</td>\n<td>values(  )</td>\n<td>entries( )</td>\n<td>forEach( )</td>\n</tr>\n<tr>\n<td>返回键名的遍历器</td>\n<td>返回键值的遍历器</td>\n<td>返回键值对的遍历器</td>\n<td>使用回调遍历每一项</td>\n</tr>\n<tr>\n<td>map( )</td>\n<td>filter( )</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>遍历返回新数组</td>\n<td>过滤筛选数值</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div>\n<p><code>Array.from</code>方法可以把Set结构转化为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"built_in\">Array</span>.from(items);</span><br></pre></td></tr></table></figure>\n<p>去重方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ces</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(array));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ces([......])</span><br><span class=\"line\">     <span class=\"comment\">//let arr = [1,2,2,3,4,3,6,5];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];</span><br></pre></td></tr></table></figure>\n<p>遍历测试</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通用测试属性\t</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">set</span> = new Set(['red', 'green', 'blue']);</span><br><span class=\"line\"></span><br><span class=\"line\">//依次替换<span class=\"keyword\">set</span>属性测试</span><br><span class=\"line\">for (let item of <span class=\"keyword\">set</span>.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//由于Set结构没有键名，只有键值（或者说键名和键值是同一个值），所以key方法和value方法的行为完全一致。</span></span><br></pre></td></tr></table></figure>\n<p>Set结构默认可遍历对象所以可以之间使用<code>for ... of</code>循环♻️遍历set</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> <span class=\"keyword\">set</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//扩展运算符（...）内部使用for...of循环，所以也可以用于Set结构。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...set];</span><br></pre></td></tr></table></figure>\n<p>如果想遍历的同时改变数组有两种方法可以选择</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//map()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">set</span> = new Set([1, 2, 3]);</span><br><span class=\"line\"><span class=\"keyword\">set</span> = new Set([...<span class=\"keyword\">set</span>].map(val =&gt; val * 2));</span><br><span class=\"line\">// <span class=\"keyword\">set</span>的值是2, 4, 6</span><br><span class=\"line\"></span><br><span class=\"line\">//Array.from()</span><br><span class=\"line\">let <span class=\"keyword\">set</span> = new Set([1, 2, 3]);</span><br><span class=\"line\"><span class=\"keyword\">set</span> = new Set(Array.from(<span class=\"keyword\">set</span>, val =&gt; val * 2));</span><br><span class=\"line\">// <span class=\"keyword\">set</span>的值是2, 4, 6</span><br></pre></td></tr></table></figure>\n<p>初次拟写～不断更新添加笔记</p>\n","prev":{"title":"逐步实现Node.js+express增删改查（ 一 ）","link":"post/逐步实现Node.js+express增删改查一"},"next":{"title":"Bootstrap组件","link":"post/demo-2-element"},"plink":"http://yoursite.com/post/Es6之Set数据结构/","toc":[{"title":"Set","id":"Set","index":"1","children":[{"title":"set实例和方法","id":"set实例和方法","index":"1.1"},{"title":"操作方法和遍历方法","id":"操作方法和遍历方法","index":"1.2"}]}]}